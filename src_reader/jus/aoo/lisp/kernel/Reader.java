/* Generated By:JavaCC: Do not edit this line. Reader.java */
package jus.aoo.lisp.kernel;
import java.io.*;

public class Reader implements ReaderConstants {
  public void main(String[] args) {
    try {
    System.out.println(read());
  } catch(ParseException e) {
                throw new LispException();
}
  }
/** le support de lecture */
protected static java.io.Reader in = new BufferedReader(new InputStreamReader(System.in));
protected static Reader parser = new Reader(in);
/** lecture d'une S-EXPR au terminal
* @return Sexpr : la Sexpr construite.
* @throws LispException une erreur de syntaxe
*/
public static Sexpr read() throws LispException, ParseException{
  try {
                Reader parser = new Reader(in);
                return parser.SEXPR();
} catch(ParseException e) {
                throw new LispException();
}
/*parser.ReInit(in);
	return parser.SEXPR();*/
  }
/** lecture d'une S-EXPR à partir de la chaîne
* @param s : la chaîne
* @return Sexpr : la Sexpr construite.
* @throws LispException une erreur de syntaxe
*/
public static Sexpr read(String s) throws LispException{
        try {
          java.io.Reader save = in;
        in = new StringReader(s);
        Sexpr r = read();
        in = save;
        return r;
}catch(ParseException e) {
                throw new LispException();
}
}
/** évaluation de la séquence S-EXPRs à partir du fichier s
* @param s : le nom du fichier
* @return Sexpr : symbole du nom du fichier.
* @throws LispException une erreur de lecture
*/
public static Sexpr importe(String s) throws LispException{


  return null; }
  protected static Sexpr quote(Sexpr s1) {
    return new Scons(Symbole.newSymbole("quote"),s1);
  }

//les règles de grammaire de ce langage
  static final public Sexpr SEXPRESSIONS() throws ParseException {
                        Sexpr s1;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARG:
      case QUOTE:
      case ID:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      s1 = SEXPR();
                 s1.eval();
    }
    jj_consume_token(0);
                                       {if (true) return Symbole.newSymbole("fini");}
    jj_consume_token(0);
    throw new Error("Missing return statement in function");
  }

  static final public Sexpr SEXPR() throws ParseException {
                 Sexpr s1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      s1 = ATOME();
      break;
    case PARG:
      jj_consume_token(PARG);
      s1 = LISTE();
      jj_consume_token(PARD);
                                         {if (true) return s1;}
      break;
    case QUOTE:
      jj_consume_token(QUOTE);
      s1 = SEXPR();
                                 {if (true) return quote(s1);}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Sexpr LISTE() throws ParseException {
                 Sexpr s1, s2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARG:
    case QUOTE:
    case ID:
      s1 = SEXPR();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POINT:
        jj_consume_token(POINT);
        s2 = SEXPR();
        break;
      default:
        jj_la1[2] = jj_gen;
        s2 = LISTE();
      }
                                                        {if (true) return new Scons(s1,s2);}
      break;
    default:
      jj_la1[3] = jj_gen;
   {if (true) return Nil.NIL;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public Sexpr ATOME() throws ParseException {
                 Sexpr s1;
    s1 = SYMBOLE();
                   {if (true) return s1;}
    throw new Error("Missing return statement in function");
  }

  static final public Sexpr SYMBOLE() throws ParseException {
                   Token t;
    t = jj_consume_token(ID);
                                           {if (true) return Symbole.newSymbole(t.image);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ReaderTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x5400,0x5400,0x2000,0x5400,};
   }

  /** Constructor with InputStream. */
  public Reader(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Reader(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Reader(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Reader(ReaderTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ReaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[47];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 4; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 47; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
